<Activity mc:Ignorable="sap sap2010" x:Class="Main" VisualBasic.Settings="{x:Null}" sap:VirtualizedContainerService.HintSize="940.8,576" sap2010:WorkflowViewState.IdRef="ActivityBuilder_1" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=System.Private.CoreLib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=System.Private.CoreLib" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>GlobalVariablesNamespace</x:String>
      <x:String>GlobalConstantsNamespace</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.Reflection</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>System.Private.CoreLib</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Linq</AssemblyReference>
      <AssemblyReference>System.Data.Common</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Drawing.Primitives</AssemblyReference>
      <AssemblyReference>System.Drawing.Common</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Constants</AssemblyReference>
      <AssemblyReference>System.Private.ServiceModel</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Formatters</AssemblyReference>
      <AssemblyReference>System.Private.DataContractSerialization</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Primitives</AssemblyReference>
      <AssemblyReference>System.Reflection.DispatchProxy</AssemblyReference>
      <AssemblyReference>System.Reflection.TypeExtensions</AssemblyReference>
      <AssemblyReference>System.ObjectModel</AssemblyReference>
      <AssemblyReference>System.Reflection.Metadata</AssemblyReference>
      <AssemblyReference>UiPath.Workflow</AssemblyReference>
      <AssemblyReference>System.IO.FileSystem.Watcher</AssemblyReference>
      <AssemblyReference>System.IO.Packaging</AssemblyReference>
      <AssemblyReference>System.IO.FileSystem.AccessControl</AssemblyReference>
      <AssemblyReference>System.IO.FileSystem.DriveInfo</AssemblyReference>
      <AssemblyReference>NPOI</AssemblyReference>
      <AssemblyReference>System.Memory.Data</AssemblyReference>
      <AssemblyReference>System.ComponentModel.TypeConverter</AssemblyReference>
      <AssemblyReference>System.Console</AssemblyReference>
      <AssemblyReference>System.Configuration.ConfigurationManager</AssemblyReference>
      <AssemblyReference>System.Security.Permissions</AssemblyReference>
      <AssemblyReference>System.ComponentModel</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>System.Private.Uri</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <Sequence DisplayName="Main Sequence" sap:VirtualizedContainerService.HintSize="485.6,511.2" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="x:String" Name="error_message" />
      <Variable x:TypeArguments="x:String" Name="source_excel_path" />
      <Variable x:TypeArguments="x:String" Name="target_excel_path" />
      <Variable x:TypeArguments="x:String" Name="copy_excel_sheet_name" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <ui:MultipleAssign DisplayName="Multiple Assign (Input)" sap:VirtualizedContainerService.HintSize="423.2,194.4" sap2010:WorkflowViewState.IdRef="MultipleAssign_1">
      <ui:MultipleAssign.AssignOperations>
        <scg:List x:TypeArguments="ui:AssignOperation" Capacity="8">
          <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_1">
            <ui:AssignOperation.To>
              <OutArgument x:TypeArguments="x:String">[source_excel_path]</OutArgument>
            </ui:AssignOperation.To>
            <ui:AssignOperation.Value>
              <InArgument x:TypeArguments="x:String">[Path.GetFullPath(Path.Combine(Environment.CurrentDirectory, "..\source excel.xlsx"))]</InArgument>
            </ui:AssignOperation.Value>
          </ui:AssignOperation>
          <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_4">
            <ui:AssignOperation.To>
              <OutArgument x:TypeArguments="x:String">[target_excel_path]</OutArgument>
            </ui:AssignOperation.To>
            <ui:AssignOperation.Value>
              <InArgument x:TypeArguments="x:String">[Path.GetFullPath(Path.Combine(Environment.CurrentDirectory, "..\target excel.xlsx"))]</InArgument>
            </ui:AssignOperation.Value>
          </ui:AssignOperation>
          <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_6">
            <ui:AssignOperation.To>
              <OutArgument x:TypeArguments="x:String">[copy_excel_sheet_name]</OutArgument>
            </ui:AssignOperation.To>
            <ui:AssignOperation.Value>
              <InArgument x:TypeArguments="x:String">Templete Sheet</InArgument>
            </ui:AssignOperation.Value>
          </ui:AssignOperation>
          <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_3">
            <ui:AssignOperation.To>
              <OutArgument x:TypeArguments="x:String">[error_message]</OutArgument>
            </ui:AssignOperation.To>
            <ui:AssignOperation.Value>
              <InArgument x:TypeArguments="x:String">
                <Literal x:TypeArguments="x:String" Value="" />
              </InArgument>
            </ui:AssignOperation.Value>
          </ui:AssignOperation>
        </scg:List>
      </ui:MultipleAssign.AssignOperations>
    </ui:MultipleAssign>
    <ui:InvokeCode ContinueOnError="{x:Null}" Code="Dim excelApp As New Microsoft.Office.Interop.Excel.Application()&#xD;&#xA;&#xD;&#xA;Try&#xD;&#xA;    excelApp.DisplayAlerts = False&#xD;&#xA;    If Not File.Exists(target_excel_path) Then&#xD;&#xA;        Throw New Exception(&quot;Application form file not found : &quot;+target_excel_path)&#xD;&#xA;    End If&#xD;&#xA;    &#xD;&#xA;    ' Open application form&#xD;&#xA;    Dim targetWorkbook As Microsoft.Office.Interop.Excel.Workbook = excelApp.Workbooks.Open(target_excel_path)&#xD;&#xA;&#xD;&#xA;    ' Check if worksheet already exists in the application form&#xD;&#xA;    For Each ws As Microsoft.Office.Interop.Excel.Worksheet In targetWorkbook.Sheets&#xD;&#xA;        If ws.Name = copy_excel_sheet_name Then&#xD;&#xA;            Return&#xD;&#xA;        End If&#xD;&#xA;    Next&#xD;&#xA;    &#xD;&#xA;    If Not File.Exists(source_excel_path) Then&#xD;&#xA;        Throw New Exception(&quot;Template example file not found : &quot;+ source_excel_path)&#xD;&#xA;    End If&#xD;&#xA;    &#xD;&#xA;    ' Open template file in read-only mode&#xD;&#xA;    Dim sourceWorkbook As Microsoft.Office.Interop.Excel.Workbook = excelApp.Workbooks.Open(source_excel_path, ReadOnly:=True)&#xD;&#xA;    Dim sourceWorksheet As Microsoft.Office.Interop.Excel.Worksheet = Nothing&#xD;&#xA;&#xD;&#xA;    ' Check if template file contains worksheet&#xD;&#xA;    For Each ws As Microsoft.Office.Interop.Excel.Worksheet In sourceWorkbook.Sheets&#xD;&#xA;        If ws.Name = copy_excel_sheet_name Then&#xD;&#xA;            sourceWorksheet = ws&#xD;&#xA;            Exit For&#xD;&#xA;        End If&#xD;&#xA;    Next&#xD;&#xA;&#xD;&#xA;    If sourceWorksheet Is Nothing Then&#xD;&#xA;        Throw New Exception(&quot;Worksheet &quot;+copy_excel_sheet_name+&quot; not found in Template&quot;)&#xD;&#xA;        Return&#xD;&#xA;    End If&#xD;&#xA;&#xD;&#xA;    ' Copy worksheet to application form&#xD;&#xA;    sourceWorksheet.Copy(After:=targetWorkbook.Sheets(targetWorkbook.Sheets.Count))&#xD;&#xA;&#xD;&#xA;    ' Close and save application form&#xD;&#xA;    targetWorkbook.Close(SaveChanges:=True)&#xD;&#xA;&#xD;&#xA;    '  Close template file without saving&#xD;&#xA;    sourceWorkbook.Close(SaveChanges:=False)&#xD;&#xA;&#xD;&#xA;    ' Close Excel&#xD;&#xA;    excelApp.Quit()&#xD;&#xA;    &#xD;&#xA;Catch ex As Exception&#xD;&#xA;    ' Handle error&#xD;&#xA;    error_message = &quot;Exception occurred while copying Template worksheet - &quot;+ex.Message&#xD;&#xA;&#xD;&#xA;Finally&#xD;&#xA;    ' Release resources and close Excel application&#xD;&#xA;    If excelApp IsNot Nothing Then&#xD;&#xA;        excelApp.Quit()&#xD;&#xA;        System.Runtime.InteropServices.Marshal.ReleaseComObject(excelApp)&#xD;&#xA;    End If&#xD;&#xA;End Try&#xD;&#xA;" DisplayName="Invoke Code" sap:VirtualizedContainerService.HintSize="423.2,164.8" sap2010:WorkflowViewState.IdRef="InvokeCode_1">
      <ui:InvokeCode.Arguments>
        <InArgument x:TypeArguments="x:String" x:Key="source_excel_path">
          <VisualBasicValue x:TypeArguments="x:String" ExpressionText="source_excel_path" />
        </InArgument>
        <InArgument x:TypeArguments="x:String" x:Key="target_excel_path">
          <VisualBasicValue x:TypeArguments="x:String" ExpressionText="target_excel_path" />
        </InArgument>
        <InArgument x:TypeArguments="x:String" x:Key="copy_excel_sheet_name">
          <VisualBasicValue x:TypeArguments="x:String" ExpressionText="copy_excel_sheet_name" />
        </InArgument>
        <InOutArgument x:TypeArguments="x:String" x:Key="error_message">
          <VisualBasicReference x:TypeArguments="x:String" ExpressionText="error_message" />
        </InOutArgument>
      </ui:InvokeCode.Arguments>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:InvokeCode>
  </Sequence>
</Activity>